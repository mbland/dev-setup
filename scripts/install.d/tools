#! /bin/bash
#
# Install tool packages

_run_command() {
  if [[ -n "$USE_SUDO" ]]; then
    sudo "$@"
  else
    "$@"
  fi
}

_update_os_and_setup_package_install_command() {
  # OS X/macOS
  if [[ "$OSTYPE" =~ ^darwin ]]; then
    if [[ ! -d '/Applications/Xcode.app' ]]; then
      echo "Please install Xcode and run this script again."
      echo "Opening the App Store to install Xcode..."
      sleep 2
      open https://appstore.com/mac/apple/Xcode
      return 1
    elif ! command -v 'brew' >/dev/null; then
      xcode-select --install
      echo "Installing Homebrew..."
      if ! /usr/bin/ruby -e "$(curl -fsSL $__BREW_INSTALL_URL)"; then
        echo "Failed to install Homebrew" 2>&1
        return 1
      fi
    fi
  elif command -v 'sudo' >/dev/null; then
    USE_SUDO='true'
  fi

  # Ubuntu/Debian/Windows Subsystem for Linux
  if command -v 'apt-get' >/dev/null; then
    __OS_PACKAGE_INSTALL_COMMAND+=('apt-get' 'install' '-y')
    export DEBIAN_FRONTEND='noninteractive'
    _run_command apt-get update
    _run_command apt-get install -y software-properties-common
    _run_command add-apt-repository -y ppa:git-core/ppa
    _run_command apt-get update
    _run_command apt-get upgrade -y
    __BUILD_SUPPORT+=('build-essential'
      'linux-headers'
      'libbz2-1.0'
      'libbz2-dev'
      'libcurl4-openssl-dev'
      'libffi-dev'
      'libpcre3-dev'
      'libreadline-dev'
      'libsqlite3-dev'
      'libssl-dev'
      'libxml2-dev'
      'libxslt1-dev'
      'libyaml-dev'
      'libzip-dev'
      'libzip2'
      'zlib1g-dev'
      'xz-utils')

  # Arch Linux/MSYS2 (Windows)
  elif command -v 'pacman' >/dev/null; then
    __OS_PACKAGE_INSTALL_COMMAND+=('pacman' '-Syuu')
    _run_command "${__OS_PACKAGE_INSTALL_COMMAND[@]}"
    __BUILD_SUPPORT+=('readline' 'xz')

  # FreeBSD
  elif command -v 'pkg' >/dev/null; then
    __OS_PACKAGE_INSTALL_COMMAND+=('pkg' 'install')
    _run_command pkg upgrade -v
    __BUILD_SUPPORT+=('readline' 'xz')

  # Alpine Linux
  elif command -v 'apk' >/dev/null; then
    __OS_PACKAGE_INSTALL_COMMAND+=('apk' 'add')
    _run_command apk update -v
    _run_command apk upgrade -v
    __BUILD_SUPPORT+=('ca-certificates' 'libc-dev' 'linux-headers' 'readline'
      'xz')

  # OS X/macOS
  elif command -v 'brew' >/dev/null; then
    _run_command brew update
    _run_command brew upgrade
    _run_command brew cleanup --force -s
    _run_command brew cask install tcl
    __OS_PACKAGE_INSTALL_COMMAND+=('brew' 'install')
    __BUILD_SUPPORT+=('libyaml'
      'libzip' 'pcre' 'reattach-to-user-namespace' 'xz')
  fi
}

_tools() {
  local tool

  _update_os_and_setup_package_install_command

  for tool in "${__ADD_IF_MISSING[@]}"; do
    if ! command -v "$tool" >/dev/null; then
      __TOOLS+=("$tool")
    fi
  done

  _run_command "${__OS_PACKAGE_INSTALL_COMMAND[@]}" \
    "${__TOOLS[@]}" "${__BUILD_SUPPORT[@]}"
}

_tools
